generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  emailVerified   Boolean    @default(false)
  firstName       String
  lastName        String
  avatar          String?
  content         Content?
  title           UserTitle?
  speed           Speed      @default(NORMAL)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  password        String
  recoveryTokenId String?    @unique

  sessions      Session[]
  accounts      Account[]
  roles         UserRole[]
  userTrainings UserTraining[]
  trainings     Training[]
  recoveryToken RecoveryToken?
}

model Role {
  id        String   @id @default(uuid())
  name      RoleName @unique
  createdAt DateTime @default(now())

  users       UserRole[]
  permissions Permission[] @relation("PermissionToRole")
}

model Permission {
  id        String   @id @default(uuid())
  action    Action
  resource  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[] @relation("PermissionToRole")
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, roleId])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}

model Account {
  id                 String    @id @default(uuid())
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  userId             String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, providerAccountId])
}

model RecoveryToken {
  id        String   @id @default(uuid())
  userId    String   @unique
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id   String @id @default(uuid())
  name String

  trainings Training[]
}

model Difficulty {
  id   String @id @default(uuid())
  name String

  trainings Training[]
}

model Training {
  id           String   @id @default(uuid())
  name         String
  description  String
  image        String?
  time         Int
  difficultyId String
  categoryId   String
  userId       String
  date         DateTime
  hide         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  difficulty    Difficulty     @relation(fields: [difficultyId], references: [id])
  category      Category       @relation(fields: [categoryId], references: [id])
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises     Exercise[]
  userTrainings UserTraining[]
}

model UserTraining {
  id         String    @id @default(uuid())
  userId     String
  trainingId String
  finished   Boolean   @default(false)
  finishedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  training Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)
}

model Exercise {
  id               String       @id @default(uuid())
  name             String
  image            String
  equipment        String[]
  bodyPart         String[]
  primaryMuscles   String[]
  secondaryMuscles String[]
  video            String
  exerciseType     ExerciseType
  information      String
  finished         Boolean      @default(false)
  trainingId       String?

  training Training? @relation(fields: [trainingId], references: [id])
  series   Serie[]
}

model Serie {
  id         String @id @default(uuid())
  weight     Float
  reps       Int
  breaktime  Int
  exerciseId String

  exercise Exercise @relation(fields: [exerciseId], references: [id])
}

enum ExerciseType {
  WEIGHT_REPS
  DURATION
  DISTANCE_DURATION
}

enum RoleName {
  ADMIN
  PRO
  STUDENT
  TEACHER
}

enum Action {
  CREATE
  READ
  UPDATE
  DELETE
}

enum UserTitle {
  ADMIN
  STUDENT
  TEACHER
}

enum Speed {
  HALF
  NORMAL
  FAST
  DOUBLE
}

enum Content {
  VIDEO
  IMAGE
}

enum Provider {
  EMAIL
  GOOGLE
  FACEBOOK
  APPLE
}
